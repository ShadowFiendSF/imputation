% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knn_impute_canopies.R
\name{kNN_impute.canopies}
\alias{kNN_impute.canopies}
\title{Imputation using weighted-kNN}
\usage{
kNN_impute.canopies(x, k, q = 2, verbose = TRUE, check_scale = TRUE,
  parallel = TRUE, leave_cores = ifelse(parallel::detectCores() <= 4, 1, 2),
  n_canopies)
}
\arguments{
\item{x}{a \code{matrix} or \code{data.frame} which can be coerced to a matrix
where each row represents a different record}

\item{k}{the number of neighbors to use for imputation}

\item{q}{An integer specifying the which norm to take the L-q distance of.}

\item{verbose}{if \code{TRUE} print status updates}

\item{check_scale}{Logical. If \code{TRUE} compute pairwise variance tests to see if
variables are on a common scale. Bonferroni correction applied.}

\item{parallel}{Logical. Do you wish to parallelize the code? Defaults to \code{TRUE}}

\item{leave_cores}{How many cores do you wish to leave open to other processing?}

\item{n_canopies}{An integer specifying how many canopies (ie- subsets) to create.}
}
\description{
Imputation using weighted k-nearest neighbors.
For each record, identify missinng features.  For each missing feature
find the \eqn{k} nearest neighbors which have that feature.  Impute the missing
value using the \eqn{k} nearest neighbors having that feature. Weights are computed
using a Gaussian kernal bandwidth parameter using 'Silverman's rule of thumb'
as described by Silverman (1998)
}
\examples{
  x = matrix(rnorm(100),10,10)
  x[x > 1] = NA
  kNN_impute(x, k=3, q=2)
}
\references{
Improved Methods for the Impution of Missing Data by Nearest Neighbors Methods
Tutz and Ramzan (2015)
}

