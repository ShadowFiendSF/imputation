// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dist_q
double dist_q(const NumericVector x, const NumericVector y, const int& q);
RcppExport SEXP imputation_dist_q(SEXP xSEXP, SEXP ySEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_q(x, y, q));
    return rcpp_result_gen;
END_RCPP
}
// dist_q_matrix
NumericVector dist_q_matrix(const NumericVector& x_ref, NumericMatrix& x_rest, const int& q);
RcppExport SEXP imputation_dist_q_matrix(SEXP x_refSEXP, SEXP x_restSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x_ref(x_refSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_rest(x_restSEXP);
    Rcpp::traits::input_parameter< const int& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_q_matrix(x_ref, x_rest, q));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mean
double weighted_mean(NumericVector& x, NumericVector w);
RcppExport SEXP imputation_weighted_mean(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mean(x, w));
    return rcpp_result_gen;
END_RCPP
}
// sort_indices
IntegerVector sort_indices(NumericVector& values);
RcppExport SEXP imputation_sort_indices(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_indices(values));
    return rcpp_result_gen;
END_RCPP
}
// kern_wt
NumericVector kern_wt(const double& sigma, const NumericVector& x);
RcppExport SEXP imputation_kern_wt(SEXP sigmaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kern_wt(sigma, x));
    return rcpp_result_gen;
END_RCPP
}
// int_rownames
IntegerVector int_rownames(const NumericMatrix x);
RcppExport SEXP imputation_int_rownames(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(int_rownames(x));
    return rcpp_result_gen;
END_RCPP
}
// rowname_match
int rowname_match(const IntegerVector& rowname_vec, const int& rowID);
RcppExport SEXP imputation_rowname_match(SEXP rowname_vecSEXP, SEXP rowIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowname_vec(rowname_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type rowID(rowIDSEXP);
    rcpp_result_gen = Rcpp::wrap(rowname_match(rowname_vec, rowID));
    return rcpp_result_gen;
END_RCPP
}
// which_na
SEXP which_na(SEXP x);
RcppExport SEXP imputation_which_na(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_na(x));
    return rcpp_result_gen;
END_RCPP
}
